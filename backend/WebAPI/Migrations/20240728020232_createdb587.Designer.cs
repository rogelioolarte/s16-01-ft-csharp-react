// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI.Data;

#nullable disable

namespace WebAPI.Migrations
{
    [DbContext(typeof(OrderlyDbContext))]
    [Migration("20240728020232_createdb587")]
    partial class createdb587
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("WebAPI.Models.Item", b =>
                {
                    b.Property<string>("ItemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ItemPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("KeyWords")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Portion")
                        .HasColumnType("INTEGER");

                    b.HasKey("ItemId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("WebAPI.Models.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WebAPI.Models.OrderItem", b =>
                {
                    b.Property<string>("OrderItemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("OrderItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("WebAPI.Models.Session", b =>
                {
                    b.Property<string>("SessionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WaiterId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SessionId");

                    b.HasIndex("WaiterId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("WebAPI.Models.Table", b =>
                {
                    b.Property<string>("TableId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TableNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TableStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WaiterId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TableId");

                    b.HasIndex("WaiterId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("WebAPI.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TableId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("SessionId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebAPI.Models.Waiter", b =>
                {
                    b.Property<string>("WaiterId")
                        .HasColumnType("TEXT");

                    b.Property<string>("WaiterName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("WaiterId");

                    b.ToTable("Waiters");

                    b.HasData(
                        new
                        {
                            WaiterId = "4298c062-645c-462c-ab23-e37dca4e78af",
                            WaiterName = "Carlos"
                        },
                        new
                        {
                            WaiterId = "b6cb56fe-34ea-4b75-b3ab-f9f8a3772e11",
                            WaiterName = "María"
                        },
                        new
                        {
                            WaiterId = "f31b5993-34d2-4567-a2c8-d4d28fb16271",
                            WaiterName = "Javier"
                        },
                        new
                        {
                            WaiterId = "0ec6cec1-eb21-46bd-b90d-d1c706f53360",
                            WaiterName = "Lucía"
                        },
                        new
                        {
                            WaiterId = "7efa6aea-9d98-41f8-9fbc-99ebc17d656b",
                            WaiterName = "Andrés"
                        },
                        new
                        {
                            WaiterId = "fcf1d3f8-21d9-49d0-a6c8-afec41dfba31",
                            WaiterName = "Sofía"
                        },
                        new
                        {
                            WaiterId = "0a4b1661-3a67-4bfd-ae6a-7e7076069464",
                            WaiterName = "Diego"
                        },
                        new
                        {
                            WaiterId = "5f567336-fe8c-40b9-b54d-fc11952274ea",
                            WaiterName = "Elena"
                        },
                        new
                        {
                            WaiterId = "b951d595-c5f5-411d-8507-ff7a3cc4c995",
                            WaiterName = "Pablo"
                        },
                        new
                        {
                            WaiterId = "61e7a0a1-dc47-4eab-a0f5-150225dad763",
                            WaiterName = "Laura"
                        });
                });

            modelBuilder.Entity("WebAPI.Models.Order", b =>
                {
                    b.HasOne("WebAPI.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAPI.Models.OrderItem", b =>
                {
                    b.HasOne("WebAPI.Models.Item", "Item")
                        .WithMany("OrderItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("WebAPI.Models.Session", b =>
                {
                    b.HasOne("WebAPI.Models.Waiter", "Waiter")
                        .WithMany("Sessions")
                        .HasForeignKey("WaiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Waiter");
                });

            modelBuilder.Entity("WebAPI.Models.Table", b =>
                {
                    b.HasOne("WebAPI.Models.Waiter", "Waiter")
                        .WithMany("Tables")
                        .HasForeignKey("WaiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Waiter");
                });

            modelBuilder.Entity("WebAPI.Models.User", b =>
                {
                    b.HasOne("WebAPI.Models.Session", "Session")
                        .WithMany("Users")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("WebAPI.Models.Item", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("WebAPI.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("WebAPI.Models.Session", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebAPI.Models.User", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WebAPI.Models.Waiter", b =>
                {
                    b.Navigation("Sessions");

                    b.Navigation("Tables");
                });
#pragma warning restore 612, 618
        }
    }
}
